package hr.fer.ppj.lab2;

import hr.fer.ppj.lab2.model.Pair;
import hr.fer.ppj.lab2.model.ParserAction;
import hr.fer.ppj.lab2.model.ParserNode;
import sun.util.resources.cldr.ebu.CurrencyNames_ebu;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

/**
 * Class for performing syntax analysis.
 */
public class SA {

    /**
     * Path to the output file of generator
     */
    private final static String TEST_FILE_INPUT_PATH = "./src/hr.fer.ppj.lab2.res/in/";
    private final static String TEST_FILE_OUTPUT_PATH = "./src/hr.fer.ppj.lab2.res/out/GSA_out.txt";
    private static List<String> program;

    /**
     * Entry point
     */
    public static void main(String[] args) {

        //setupStdIO();

        try (Scanner scanner = new Scanner(System.in)) {

            readInputProgram(scanner);
            deserializeData();

        } catch (Exception e) {
            System.err.println(e.getMessage());
            System.exit(1);
        }

        runSyntaxAnalyser();
    }

    /**
     * Standard I/O redirection
     */
    private static void setupStdIO() throws IOException {
        System.setIn(new FileInputStream(new File(TEST_FILE_INPUT_PATH)));
        System.setOut(new PrintStream(new File(TEST_FILE_OUTPUT_PATH)));
    }


    /**
     * Method for reading program from standard input
     */
    private static void readInputProgram(Scanner scanner) {
        program = new ArrayList<>();

        while (scanner.hasNextLine()) {
            program.add(scanner.nextLine());
        }

    }

    /**
     * Method for deserializing data generated by GSA
     */
    private static void deserializeData() throws Exception {

        try {

            File file = new File(GSA.SERIALIZATION_FILE_PATH);
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            fis.close();
            ois.close();

        } catch (IOException e) {
            throw new IOException(e.getMessage());
        }

    }

    /**
     * Method that starts the lexical analysis of given program
     */
    private static void runSyntaxAnalyser() {

        // linija ulaza je oblika
        // ime_jedinke broj_linije leksicka_jedinka

        int currentState = 0;
        boolean accepted = false;

        Stack<ParserNode> stack = new Stack<>();
        stack.push(new ParserNode(String.valueOf(currentState)));

        // prolaz kroz sve jedinke

        for (String line : program) {

            // dohvati ime_jedinke trenutne linije

            String character = line.trim().split("\\s+")[0];

            // pronalazak akcije za par (stanje, ime_jedinke)

            ParserAction parserAction = GSA.parserTable.get(new Pair(currentState, character));

            ParserNode newNode;
            switch (parserAction.getParserActionType()) {

                case SHIFT:

                    currentState = Integer.valueOf(parserAction.getArgument());
                    newNode = new ParserNode(line);
                    stack.push(new ParserNode(String.valueOf(currentState)));
                    stack.push(newNode);
                    break;

                case REDUCE:

                    String reducePattern = parserAction.getArgument();
                    String leftSide = reducePattern.split("->")[0];
                    String rightSide = reducePattern.split("->")[1];

                    newNode = new ParserNode(line);

                    int i = 1;
                    while (i <= rightSide.length()) {
                        newNode.addSubNode(stack.pop());
                        ++i;
                    }

                    stack.push(new ParserNode(leftSide));

                    break;

                case REJECT:
                    // ovdje valjda ide oporavak
                    break;

                case ACCEPT:
                    accepted = true;
                    break;

                case PUT:
                    break;

            }

            if (accepted) {
                break;
            }

        }

    }

}
