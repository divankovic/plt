package hr.fer.ppj.lab2;

import hr.fer.ppj.lab1.helper.EpsilonNFA;
import hr.fer.ppj.lab2.model.*;

import java.io.*;
import java.util.*;

/**
 * Class for performing syntax analysis.
 */
public class SA {

    /**
     * Path to the output file of generator
     */
    private final static String TEST_FILE_INPUT_PATH = "./src/hr/fer/ppj/lab1/res/out/LA_out.txt";
    private final static String TEST_FILE_OUTPUT_PATH = "./src/hr/fer/ppj/lab2/res/out/SA_out.txt";
    private final static String SERIALIZATION_FILE_PATH = "./definition.ser";
    private final static String WHITESPACE_REGEX = "\\s+";
    private final static String PRODUCTION_DELIMITER = "->";

    private static Stack<ParserNode> stack = new Stack<>();
    private static List<String> program;
    private static HashMap<Pair, ParserAction> parserTable;
    private static List<String> terminalSymbols;
    private static List<String> syncSymbols;


    /**
     * Entry point
     */
    public static void main(String[] args) throws IOException {

        setupStdIO();

        try (Scanner scanner = new Scanner(System.in)) {

            readInputProgram(scanner);
            deserializeData();

        } catch (Exception e) {
            System.err.println(e.getMessage());
            System.exit(1);
        }

        runSyntaxAnalyser();
    }

    /**
     * Standard I/O redirection
     */
    private static void setupStdIO() throws IOException {
        System.setIn(new FileInputStream(new File(TEST_FILE_INPUT_PATH)));
        System.setOut(new PrintStream(new File(TEST_FILE_OUTPUT_PATH)));
    }


    /**
     * Method for reading program from standard input
     */
    private static void readInputProgram(Scanner scanner) {
        program = new ArrayList<>();

        while (scanner.hasNextLine()) {
            program.add(scanner.nextLine());
        }

    }

    /**
     * Method for deserializing data generated by GSA
     */
    @SuppressWarnings("unchecked")
    private static void deserializeData() throws Exception {

        try {

            File file = new File(GSA.SERIALIZATION_FILE_PATH);
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            terminalSymbols = (List<String>) ois.readObject();
            syncSymbols = (List<String>) ois.readObject();
            parserTable = (HashMap<Pair, ParserAction>) ois.readObject();

            fis.close();
            ois.close();

        } catch (IOException e) {
            throw new IOException(e.getMessage());
        }

    }

    /**
     * Method that starts the lexical analysis of given program
     */
    private static void runSyntaxAnalyser() {

        ParserNode startNode;
        int currentState = 0;
        boolean accepted = false;
        stack.push(new ParserNode(String.valueOf(currentState)));

        int j = 0;
        while (j <= program.size() && j != -1) {

            String character;
            String line = "";

            if (j < program.size()) {

                line = program.get(j);
                character = line.trim().split(WHITESPACE_REGEX)[0];

            } else {
                character = Grammar.endOfLine;
            }

            ParserAction parserAction = parserTable.get(new Pair(currentState, character));

            if (parserAction == null) {
                j = parserError(j);
                currentState = Integer.parseInt(stack.peek().getContent());

            } else {

                ParserNode newNode;
                switch (parserAction.getParserActionType()) {

                    case SHIFT:

                        currentState = Integer.valueOf(parserAction.getArgument());
                        newNode = new ParserNode(line);
                        stack.push(newNode);
                        stack.push(new ParserNode(String.valueOf(currentState)));
                        j += 1;
                        break;

                    case REDUCE:

                        String reducePattern = parserAction.getArgument();
                        String leftSide = reducePattern.split(PRODUCTION_DELIMITER)[0];
                        String[] rightSide = reducePattern.split(PRODUCTION_DELIMITER)[1].split(WHITESPACE_REGEX);
                        newNode = new ParserNode(leftSide);

                        if (rightSide[0].equals(EpsilonNFA.epsilonSymbol)) {
                            newNode.addSubNode(new ParserNode(EpsilonNFA.epsilonSymbol));
                        } else {

                            int i = 1;
                            while (i <= rightSide.length) {
                                stack.pop();
                                newNode.addSubNode(stack.pop());
                                ++i;
                            }

                        }

                        int bottomState = Integer.parseInt(stack.peek().getContent());
                        ParserAction nextAction = parserTable.get(new Pair(bottomState, leftSide));

                        if (nextAction != null) {
                            stack.push(newNode);
                            stack.push(new ParserNode(nextAction.getArgument()));
                            currentState = Integer.parseInt(nextAction.getArgument());

                        } else {
                            j = parserError(j);
                            currentState = Integer.parseInt(stack.peek().getContent());
                        }

                        break;

                    case ACCEPT:
                        accepted = true;
                        break;

                }

                if (accepted) {
                    break;
                }

            }

        }

        if (accepted) {
            stack.pop();
            startNode = stack.pop();
            printGeneratingTree(startNode, 0);
        }

    }


    private static void printGeneratingTree(ParserNode startNode, int level) {
        System.out.println(getIndentation(level) + startNode);
        List<ParserNode> childrenNodes = startNode.getSubNodes();
        if (childrenNodes != null) {
            if (!childrenNodes.isEmpty()) {
                childrenNodes.forEach(node -> printGeneratingTree(node, level + 1));
            }
        }
    }

    private static String getIndentation(int level) {
        String indentation = "";
        int i = 0;
        while (i < level) {
            indentation = indentation.concat(" ");
            ++i;
        }
        return indentation;
    }

    private static int parserError(int j) {

        String line = program.get(j);
        List<String> elements = Arrays.asList(line.split(WHITESPACE_REGEX));

        System.err.println("Error occurred at line ->" + elements.get(1) + "<-");

        List<String> expectedTokens = new LinkedList<>();
        int currentState = Integer.parseInt(stack.peek().getContent());
        int finalCurrentState = currentState;

        terminalSymbols.forEach(token -> {
            if (parserTable.get(new Pair(finalCurrentState, token)) != null) {
                expectedTokens.add(token);
            }
        });

        System.err.println("Expected uniform symbols:");
        expectedTokens.forEach(token -> System.err.printf("  " + token));
        System.err.println();

        StringBuilder content = new StringBuilder();
        List<String> contentElements = elements.subList(2, elements.size());
        for (String elem : contentElements) {
            content.append(elem);
        }
        System.err.println("Read uniform symbol with name ->" + elements.get(0) + "<- and value ->" + content.toString() + "<-");

        while (j < program.size()) {

            if (syncSymbols.contains(program.get(j).split(WHITESPACE_REGEX)[0])) {

                while (!stack.empty()) {

                    currentState = Integer.parseInt(stack.peek().getContent());

                    if (parserTable.get(new Pair(currentState, program.get(j).split(WHITESPACE_REGEX)[0])) != null) {

                        System.err.println("Found sync sign with index ->" + j + "<- and value ->" + program.get(j).split(WHITESPACE_REGEX)[0] + "<-");
                        return j;
                    } else {
                        stack.pop();

                        // nema oznake dna stoga pa treba ovo dodati ako skida do kraja da nije exception
                        if (!stack.isEmpty()) {
                            stack.pop();
                        }

                    }

                }

                System.err.println("Couldn't recover from error.");
            } else {
                ++j;
            }

        }

        System.err.println("Sync sign not found");
        return -1;
    }

}
