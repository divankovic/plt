package hr.fer.ppj.lab2;

import hr.fer.ppj.lab1.helper.EpsilonNFA;
import hr.fer.ppj.lab2.model.*;

import java.io.*;
import java.util.*;

/**
 * Class for performing syntax analysis.
 */
public class SA {

    /**
     * Path to the output file of generator
     */
    private final static String TEST_FILE_INPUT_PATH = "./src/hr.fer.ppj.lab2.res/in/";
    private final static String TEST_FILE_OUTPUT_PATH = "./src/hr.fer.ppj.lab2.res/out/GSA_out.txt";
    private static Stack<ParserNode> stack = new Stack<>();
    private static List<String> program;
    private static HashMap<Pair, ParserAction> parserTable;
    private static List<String> syncSymbols;

    /**
     * Entry point
     */
    public static void main(String[] args) {

        //setupStdIO();

        try (Scanner scanner = new Scanner(System.in)) {

            readInputProgram(scanner);
            deserializeData();

        } catch (Exception e) {
            System.err.println(e.getMessage());
            System.exit(1);
        }

        runSyntaxAnalyser();
    }

    /**
     * Standard I/O redirection
     */
    private static void setupStdIO() throws IOException {
        System.setIn(new FileInputStream(new File(TEST_FILE_INPUT_PATH)));
        System.setOut(new PrintStream(new File(TEST_FILE_OUTPUT_PATH)));
    }


    /**
     * Method for reading program from standard input
     */
    private static void readInputProgram(Scanner scanner) {
        program = new ArrayList<>();

        while (scanner.hasNextLine()) {
            program.add(scanner.nextLine());
        }

    }

    /**
     * Method for deserializing data generated by GSA
     */
    @SuppressWarnings("unchecked")
    private static void deserializeData() throws Exception {

        try {

            File file = new File(GSA.SERIALIZATION_FILE_PATH);
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            syncSymbols = (List<String>)ois.readObject();
            parserTable = (HashMap<Pair, ParserAction>) ois.readObject();

            fis.close();
            ois.close();

        } catch (IOException e) {
            throw new IOException(e.getMessage());
        }

    }

    /**
     * Method that starts the lexical analysis of given program
     */
    private static void runSyntaxAnalyser() {

        // linija ulaza je oblika
        // ime_jedinke broj_linije leksicka_jedinka

        ParserNode startNode;
        int currentState = 0;
        boolean accepted = false;
        stack.push(new ParserNode(String.valueOf(currentState)));

        // prolaz kroz sve ulazne linije ( znakove )
        int j = 0;
        while(j<=program.size()){
            String character;
            String line="";
            if(j<program.size()){
                line = program.get(j);

                // dohvati ime_jedinke trenutne linije
                character = line.trim().split("\\s+")[0];


            }else{
                character = Grammar.endOfLine;
            }

            // pronalazak akcije za par (stanje, ime_jedinke)
            ParserAction parserAction = parserTable.get(new Pair(currentState, character));

            if(parserAction==null){

                //j=parserError(line);
            }else {

                ParserNode newNode;
                switch (parserAction.getParserActionType()) {

                    case SHIFT:

                        currentState = Integer.valueOf(parserAction.getArgument());
                        newNode = new ParserNode(line);
                        stack.push(newNode);
                        stack.push(new ParserNode(String.valueOf(currentState)));
                        j += 1;
                        break;

                    case REDUCE:

                        String reducePattern = parserAction.getArgument();
                        String leftSide = reducePattern.split("->")[0];
                        String rightSide = reducePattern.split("->")[1];
                        newNode = new ParserNode(leftSide);

                        if (rightSide.equals(EpsilonNFA.epsilonSymbol)) {
                            newNode.addSubNode(new ParserNode(EpsilonNFA.epsilonSymbol));
                        } else {
                            int i = 1;
                            while (i <= rightSide.length()) {
                                stack.pop();
                                newNode.addSubNode(stack.pop());
                                ++i;
                            }
                        }

                        int bottomState = Integer.parseInt(stack.peek().getContent());
                        ParserAction nextAction = parserTable.get(new Pair(bottomState, leftSide));
                        if (nextAction != null) {
                            stack.push(newNode);
                            stack.push(new ParserNode(nextAction.getArgument()));
                        } else {
                            //parserError(line);
                        }

                        break;

                    case ACCEPT:
                        accepted = true;
                        break;


                }

                if (accepted) {
                    break;
                }
            }

        }

        if(accepted){
            stack.pop();
            startNode = stack.pop();
            printGeneratingTree(startNode,0);
        }else{

        }
    }

    private static void printGeneratingTree(ParserNode startNode, int level){
        System.out.println(getIndentation(level)+startNode);
        List<ParserNode> childrenNodes = startNode.getSubNodes();
        if(!childrenNodes.isEmpty()){
            childrenNodes.forEach(node-> printGeneratingTree(node,level+1));
        }
    }

    private static String getIndentation(int level){
        String indentation = "";
        int i = 0;
        while(i<level){
            indentation = indentation.concat(" ");
        }
        return indentation;
    }

    private static int parserError(String line){


        return 0;
    }

}
