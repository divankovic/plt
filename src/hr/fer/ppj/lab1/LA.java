package hr.fer.ppj.lab1;

import hr.fer.ppj.lab1.helper.EpsilonNFA;
import hr.fer.ppj.lab1.model.Identifier;
import hr.fer.ppj.lab1.model.Regex;
import hr.fer.ppj.lab1.model.Rule;
import hr.fer.ppj.lab1.model.State;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Class that performs lexical analysis of given program using definitions generated by GLA
 */
public class LA {

    private static String program;
    private static List<Regex> regexList;
    private static List<State> stateList;
    private static List<Identifier> identifierList;
    private static List<Rule> ruleList;
    private static List<EpsilonNFA> epsilonNFAList;

    /**
     * Entry point
     */
    public static void main(String[] args) {

        setupStdIO();

        try {
            Scanner scanner = new Scanner(System.in);
            readInputProgram(scanner);

            deserializeData();

        } catch (Exception e) {
            System.err.println(e.getMessage());
            System.exit(1);
        }

        runLexer();
    }

    /**
     * Standard I/O redirection
     */
    private static void setupStdIO() {
//        System.setIn();
//        System.setOut();
    }


    /**
     * Method for reading program for standard input
     */
    private static void readInputProgram(Scanner scanner) {
        StringBuilder sb = new StringBuilder();

        while (scanner.hasNextLine()) {
            sb.append(scanner.nextLine());
        }

        program = sb.toString();
    }

    /**
     * Method for deserializing data generated by GLA
     */
    private static void deserializeData() throws Exception {

        try {

            File file = new File(GLA.SERIALIZATION_FILE_PATH);
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            regexList = (List<Regex>) ois.readObject();
            stateList = (List<State>) ois.readObject();
            identifierList = (List<Identifier>) ois.readObject();
            ruleList = (List<Rule>) ois.readObject();
            epsilonNFAList = (List<EpsilonNFA>) ois.readObject();

            fis.close();
            ois.close();

        } catch (IOException e) {
            throw new IOException(e.getMessage());
        }

    }

    /**
     * Method that starts the lexical analysis of given program
     */
    private static void runLexer() {

        State currentState = stateList.get(0);
        List<EpsilonNFA> positiveENFA = new ArrayList<>();

        int first = 0, last = 0;
        int end = program.length() - 1;

        while (last <= end) {

            for (EpsilonNFA epsilonNFA : epsilonNFAList) {
                if (epsilonNFA.getState().equals(currentState) && epsilonNFA.recognizes(program.substring(first, last))) {
                    positiveENFA.add(epsilonNFA);
                }
            }

            if (!positiveENFA.isEmpty()) {
                last++;
            }

        }

    }

}
